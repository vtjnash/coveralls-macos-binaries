name: Build and Release Coveralls macOS Binary

on:
  workflow_dispatch:
    inputs:
      upstream_version:
        description: 'Upstream Coveralls version to build (e.g., v0.6.15)'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-latest
            arch: aarch64
            artifact_suffix: aarch64
          - runner: macos-13
            arch: x86_64  
            artifact_suffix: x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate release tag
        id: release_info
        run: |
          # Generate build counter
          BUILD_COUNTER=$(date +%Y%m%d%H%M%S)
          RELEASE_TAG="${{ github.event.inputs.upstream_version }}-build.${BUILD_COUNTER}"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Install Homebrew dependencies
        run: |
          # Install required tools from Homebrew
          brew install shards pkg-config

      - name: Download and Extract Crystal Compiler
        run: |
          # Download Crystal 1.17.1 tarball
          curl -L -o crystal-1.17.1-1-darwin-universal.tar.gz \
            https://github.com/crystal-lang/crystal/releases/download/1.17.1/crystal-1.17.1-1-darwin-universal.tar.gz
          
          # Extract to project root
          tar -xzf crystal-1.17.1-1-darwin-universal.tar.gz

      - name: Download Julia OpenSSL Libraries
        run: |
          # Download Julia OpenSSL binary wrapper
          curl -L -o OpenSSL.v3.5.2.aarch64-apple-darwin.tar.gz \
            https://github.com/JuliaBinaryWrappers/OpenSSL_jll.jl/releases/download/OpenSSL-v3.5.2+0/OpenSSL.v3.5.2.aarch64-apple-darwin.tar.gz

      - name: Set Up Local Toolchain
        run: |
          # Create local bin directory
          mkdir -p bin
          
          # Create symlinks to tools
          ln -s ../crystal-1.17.1-1/bin/crystal bin/crystal
          ln -s $(which shards) bin/shards
          ln -s $(which pkg-config) bin/pkg-config

      - name: Checkout Coverage Reporter
        uses: actions/checkout@v4
        with:
          repository: coverallsapp/coverage-reporter
          ref: ${{ github.event.inputs.upstream_version }}
          path: coverage-reporter
          depth: 1

      - name: Install Coverage Reporter Dependencies
        run: |
          cd coverage-reporter
          
          # Install production dependencies
          PATH=../bin:$PATH ../bin/shards install --production

      - name: Extract OpenSSL to Distribution Folder
        run: |
          cd coverage-reporter
          
          # Extract OpenSSL libraries directly into the dist folder
          mkdir -p dist/OpenSSL.v3.5.2.aarch64-apple-darwin
          tar -xzf ../OpenSSL.v3.5.2.aarch64-apple-darwin.tar.gz -C dist/OpenSSL.v3.5.2.aarch64-apple-darwin

      - name: Build Binary with Embedded Library Path
        run: |
          cd coverage-reporter
          
          # Build with Crystal's embedded libraries and Julia OpenSSL, setting rpath for portability
          PATH=../bin:/bin:/usr/bin \
          PKG_CONFIG_PATH="$PWD/../crystal-1.17.1-1/embedded/lib/pkgconfig:$PWD/dist/OpenSSL.v3.5.2.aarch64-apple-darwin/lib/pkgconfig" \
          LIBRARY_PATH="$PWD/dist/OpenSSL.v3.5.2.aarch64-apple-darwin/lib" \
          ../bin/crystal build src/cli.cr -o dist/coveralls --release --no-debug --progress \
          --link-flags "-Wl,-rpath,@executable_path/OpenSSL.v3.5.2.aarch64-apple-darwin/lib"

      - name: Test Binary
        run: |
          cd coverage-reporter
          
          # Test the distributable binary
          ./dist/coveralls --version
          
          # Verify library dependencies
          echo "Library dependencies:"
          otool -L ./dist/coveralls
          
          # Verify rpath is set correctly
          echo "Runtime paths:"
          otool -l ./dist/coveralls | grep -A 2 LC_RPATH

      - name: Create Distribution Package
        run: |
          cd coverage-reporter
          
          # Create a tarball of the distributable folder
          tar -czf "../coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz" \
            -C dist .
          
          # Move back to root for artifact upload
          mv "../coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz" ../
          
          # Create shasum files
          cd ..
          
          # Checksum for the distribution package
          shasum -a 256 "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz" > \
            "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256"
          
          # Create build inputs checksums with filenames
          echo "# Build Input Checksums for coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}" > "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          echo "# Generated: $(date -u)" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          echo "# Upstream Version: ${{ github.event.inputs.upstream_version }}" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          echo "# Build Architecture: ${{ matrix.arch }}" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          echo "" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          
          # Add Crystal compiler tarball with filename
          echo "# Crystal Compiler (darwin-universal)" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          shasum -a 256 crystal-1.17.1-1-darwin-universal.tar.gz >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          echo "" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          
          # Add Julia OpenSSL tarball with filename  
          echo "# Julia OpenSSL Libraries (aarch64-apple-darwin)" >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"
          shasum -a 256 OpenSSL.v3.5.2.aarch64-apple-darwin.tar.gz >> "coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}
          path: |
            coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz
            coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256
            coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256
          retention-days: 90

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          name: "Coveralls macOS Binary ${{ steps.release_info.outputs.release_tag }}"
          body: |
            ## Coveralls Coverage Reporter - macOS Binary Distribution
            
            Built from upstream version: **${{ github.event.inputs.upstream_version }}**
            
            ### Build Components
            - **Crystal Compiler**: 1.17.1 (darwin-universal)
            - **OpenSSL Libraries**: 3.5.2 (Julia BinaryWrappers)
            - **Build Architecture**: ${{ matrix.arch }}
            - **Build Target**: ${{ matrix.arch }}-apple-darwin
            
            ### Features
            - ✅ Completely self-contained - no external dependencies
            - ✅ Uses only system libraries + bundled Julia OpenSSL 3.5.2
            - ✅ Embedded rpath - works immediately after extraction
            - ✅ True portability - runs on any macOS system
            
            ### Usage
            ```bash
            # Verify integrity (optional)
            shasum -a 256 -c coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256
            
            # View build input checksums (optional)
            cat coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256
            
            # Extract the archive
            tar -xzf coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz
            cd coveralls-macos
            
            # Run immediately - no setup required!
            ./coveralls --version
            ./coveralls --help
            ```
            
            ### Build Reproducibility
            The build inputs checksum file contains SHA-256 hashes of:
            - Crystal 1.17.1 darwin-universal tarball
            - Julia OpenSSL 3.5.2 aarch64-apple-darwin tarball
            
            This enables verification and reproduction of the exact build environment.
            
            ### Library Dependencies
            - `/usr/lib/libxml2.2.dylib` (system library)
            - `/usr/lib/libz.1.dylib` (system library)  
            - `@rpath/libssl.3.dylib` (bundled Julia OpenSSL 3.5.2)
            - `@rpath/libcrypto.3.dylib` (bundled Julia OpenSSL 3.5.2)
            - `/usr/lib/libiconv.2.dylib` (system library)
            - `/usr/lib/libSystem.B.dylib` (system library)
            
            Built with Crystal 1.17.1 using our portable build process.
          files: |
            coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz
            coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}.tar.gz.sha256
            coveralls-macos-${{ github.event.inputs.upstream_version }}-${{ matrix.artifact_suffix }}-build-inputs.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}